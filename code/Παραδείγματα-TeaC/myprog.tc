(* My first TeaC program *)

-- const
const message[] <- "Hello world!\n":  string;
const c1 <- 1 : int;
const c2 <- 1.1 : real;
const c3 <- false, b <- true :bool;
const c4 <- c1: int; 
-- const array
const ca1[2] <- {1 ,2}:int;
const ca2[3] <- {true, false, true}:bool;
const ca3[10] <- "message": string; 

-- let no init
let l0 : int;
let s[80] :string;
-- let
let message <- "n":  string;
let l1 <- -1 : int;
let l2 <- 1.1 : real;
let l3 <- false, b <- true :bool;
let l4 <- c1: int; 
let l5 : []int;
-- let array
let la1[2] <- {1 ,2}:int;
let la2[3] <- {true, false, true}:bool;
let la3[10] <- "message": string; 

-- functions
const f1 <- (x:real):real => { 
	let y <- f1(l1) : int;
	return x; 
}
const f2 <- (s[]: string): int =>{ return; };
const f3 <- (x:real):[]real => { return; };
const f4 <- (x:real, y : int, s[]: string):[]bool => { return; };
const f5 <- ():bool => { return; };

const f6 <- (r1, r2:real, s[]: string):real => {

	if n < 0 then
		result <- prime(-n);
	else
		if n < 2 then
			result <- false;
		else 
			if n = 2 then
				result <- true;
			else 
				if n % 2 = 0 then
					result <- false;
				else
					i <- 3;
					isPrime <- true;
					while isPrime and (i < n / 2) loop
						isPrime <- n % i != 0;
						i <- i + 2;
					pool;
					result <- isPrime;
				fi;
			fi;
		fi;
	fi;

};

const f7 <- (i1, i2, int3, iefcescv:int, s1[],s2: string):real => {


	let l1 <- -a : int;				-- αντίθετος της μεταβλητής a
	l1 <- a + b * (b / a);			-- αριθμητική έκφραση
	l1 <- 4 + 50.0*x / 2.45;		-- αριθμητική έκφραση
	l1 <- (a+1) % cube(b+3);		-- αριθμητική έκφραση με κλήση συνάρτησης
	l1 <- (a <= b) and (d <= c);	-- τελεστές λογικοί με σχεσιακούς
	l1 <- (c+a) != (2*d);			-- τελεστές αριθμητικοί με σχεσιακούς
	l1 <- a + b[(k+1)*2];			-- αριθμητική έκφραση με πίνακα

	f6(i1, i2, int3);

    return l1;
	
	l1 <- 10;
	l1 <- readInt();
};

const start <- (): int => {
  return;
}
